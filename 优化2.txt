#UI优化
 一、1.现象――丢帧和卡顿
    帧率fps：一秒钟内的帧数，即一秒钟GPU执行绘制的次数。 显示频率HZ：一秒钟更新显示的次数。
    若60HZ（一般手机配置）搭配小于60fps的帧率，出现丢帧。
    所以标准一次绘制的时间1000ms/60=16ms。时间长于16ms的绘制会出现丢帧，或者画面上下断裂等现象。
    2.原因及解决
      1>布局太深。采用布局扁平化设计，防止多层嵌套，可通过适当将LinearLayout改为RelativeLayout等方式降低布局的层数（其余情况线性布局由于其onDraw()方法调用次数相对少，因而比相对布局有更高的效率）。
      2>布局太多。<include /> 标签来重用layout代码，以及<merge />删减多余或者额外的层级。
      3>UI绘制单元太多，CPU/GPU负载过重。减少不必要的绘制单元或控件。
      4>动画次数过多，16ms内无法完成。
    3.工具
      开发者选项中的每帧占用时间，用条状显示在界面上。16ms为界限，蓝色表示measure和draw所用时间，红色表示渲染时间，黄色表示CPU等待GPU运行时间。（支付宝的"口碑外卖""蚂蚁聚宝""游戏中心"三个活动转场时有短暂的较长的紫色线条，知乎转场时黄红线条，两者Listview滑动时都表现出色小于16ms）
 二、1.现象――OverDraw
    对不可见的UI进行了绘制或者更新，浪费资源，导致卡顿。
    观测工具：开发者选项中的GPU过度渲染显示，控件重叠从低到高依次显示蓝，绿，粉，红色。
    2.解决（以background为例）
      1>将Window的默认background移除。
      2>移除不必要的background。
      3>设置ImageView的transparent属性，使没有获取到图片时才调用background。
      
 三、自定义view的问题
     自定义view的三大流程measure，draw和layout中measure和layout最耗时。
     而且如果是自定义View碰到overDraw的情况，系统无法检测onDraw()中的操作而完成自动优化，canvas的clipRect()和quickReject()使创造一个只能在里面进行绘制的矩形区域，避免的过度渲染问题。


#内存优化
 一、频繁gc
     1现象。
      回收所有不可达对象的gc机制执行时，其他线程任务会暂时停滞。因此过长和过于频繁的gc降低效率会导致卡顿。
     2.解决
       1>避免过于频繁的new对象和gc回收对象，比如避免for循环中出现创建对象语句。
       2>避免在onDraw()语句中创建对象。
       3>优化listview。构建adapter是使用contentView缓存，减少创建View对象次数。
       4>适用对象池模型。
       5>gc对数组、队列、数、图的回收效率低，尽早将不用的设为null。
     3.优化后的JVMgc机制。
     三级generation：young generation,old generation,permanent generation。不可达的对象依次进入每级内存区域，第一个区域进行快速创建和回收，同样对应最短的gc时间，后两个依次增加。
 二、leak
     原因及解决
     1.数据库的cursor没有及时关闭。及时调用close()对其关闭。
     2.线程没有及时终止，会持续占据内存。及时调用remove()清除。
     3.Bitmap对象不使用时采用recycle()释放内存。
 三、阻塞
     1.子线程。耗时任务如果在主线程执行，会导致UI线程阻塞，将耗时语句如下载文件、读写数据库等放到子线程执行。
     2.线程池。线程不可能做到绝对的并行，只会通过时间片轮转的方式调度每个线程。因此需要一个线程池存放线程的缓存，否则大量线程的创建和销毁会消耗大量时间，入不敷出
 四、溢出
     多数OOM都是因为Bitmap太大。
     1.大图采用压缩图片。通过设置BitmapFactory.Options中inSampleSize的值对图片进行压缩。
     2.多图采用缓存图片。使用LruCache（是一个LinkedHashMap ），从cache中去取出Bitmap显示，如果缓存中不存在就启动一个task去加载（from文件或网络）。
 五、内存工具
     1.Heap Tool 进行内存快照，如需检测某个对象是否被回收，在System.gc()前后各拍一张内存快照进行对比。另外当heap size超过阈值时自动OOM。
     2.Allocation Tracker 从开始到结束之间时间段监测内存调用情况，查出leak元凶。
     3.Memory Monitor 查看APP整体消耗内存情况，以及发生GC的时刻。反映出当前操作带来的CPU和内存变化。
     4.traceView。

#运算优化
  1.float比int计算慢几倍以上。
  2.算法上进行优化。如使用排序中的快排归并堆排，查找使用二叉树和平衡树等。尽量不用O(n*n)时间复杂度以上的算法，必要时候可用空间换时间。
  3.数据类型的选择。如hashmap,hashset的选择，StringBuilder代替String，ArrayList和LinkedList的选择
  4.采用JNI，将耗时间的处理放到c/c++层来处理。
  5.尽量采用文件操作，其速度比数据库的操作要快10倍左右。
  6.如果方法用不到成员变量，可以把方法申明为static，性能会提高到15%到20%。static的变量如果不需要修改，应该使用static  final修饰符定义为常量。
  7.使用单例模式。
  8.提前或延迟操作，错开时间段提高TPS。Android中除了支持ScheduledExecutorService之外，还有一些delay操作，如handler.postDelayed，handler.postAtTime，handler.sendMessageDelayed，View.postDelayed，AlarmManager定时等。

#网络优化
 
  1.对于现成的HTTP框架，有很多需要服务端配合的，比如：json数据格式代替xml或html，WebP代替jpg，支持断点续传，多个请求合并成一个，尽量不做重定向，服务器缓存以及负载均衡等。
  2.对客户端本身，除了上述的实现，我们还需要合理的缓存，控制最大请求并发量，及时取消已失效的请求，过滤重复请求，timeout时间设置，请求优先级设置等。

#电量优化
  1.PowerManager.WakeLock可唤醒手机，调用完后记得恢复原始状态。
  2.不同电量执行不同策略。获取手机充电状态信息，将耗电任务放到充电时进行等。