APP性能优化三方面


# 内存优化

1.内存
  稀缺资源。
  OOM(out of memory),UI不流畅（阻塞主线程）
  调试工具：
  1>.DDMS：
    Memory Monitor：查看整个app所占用的内存，以及发生GC的时刻。反映出当前操作带来的CPU和内存变化。
    Heap Tool。来张内存快照。（排查内存泄漏:System.gc()前后的内存照对比）heap size>16M  ,自动触发OOM（现已有100M上限的手机）。
    Average――查看每块内存大小，发现零星小内存块，可以进行归并优化。
    Allocation Tracker Tool。（排查内存泄漏:开始监听到结束监听之间找出泄漏元凶）收集start-get之间所有内存分配的状况。
    

  2>.MAT：
    leak suspects（内存泄漏报告）, top components（大文件）, histogram（每个class占用的内存）, dominator tree（哪些对象占内存最多）。
  3>.android.os.debu
   使用起来比较简单，我们先导入 import android.os.Debug这个包。
   在需要开始跟踪的地方加入 Debug.startMethodTracing(“/sdcard/debug”); 
   最终在停止调试的地方加入 Debug.stopMethodTracing();
   最终在sdcard上生成的debug文件我们可以用sdk/tools中的traceview来查看运行的结果。
   traceView运行结果：时间面板：每个线程执行情况。方法面板：每个方法执行情况。realtime>cputime。



  步骤：编译代码-选定测试场景-测试场景转换成用例-跑起工具Run用例-结合代码分析

  遇到的问题：（前两项是重中之重）
  1>.单例模式中的statc变量，一直释放不了。
  2>.bitmap。及时销毁+设置采样率+softrefrence软引用
  3>.多线程生命周期过长
  4>.数据库的cursor。及时在ondestroy()中close()。

outgoing ref, incoming ref, path to GC roots。


2.UI流畅度
三个工具：Method profile。定位UI流畅度问题所在地。即使用traceview。
          Aspectj插桩。切片式编程。是AOP的java实现。
          GT（腾讯出品）

卡顿原因：主线程干的活太多，UI没有时间相应用户操作；
          阻塞式方法执行时间过长，UI5秒，广播10S就阻塞――ANR(application not responding)。
          不太合理的UI绘制方式，UI显示时有顿挫感。

绘制UI：inflate-measure-layout-draw 第二步和第三步最耗时。

测试fps帧率，缺陷：依赖用户操作。

垂直同步vertical synchronization。




3.IO
  SQlite和xml类。保证原子性。
  文件类。简单快速。





*使用HierarchyViewer来查找Activity中的布局是否过于复杂‘
*使用TraceView来观察CPU的执行情况，更加快捷的找到性能瓶颈。









内存泄漏情况：

出现情况: 1. 数据库的cursor没有关闭.资源性对象比如（Cursor，File文件等）往往都用了一些缓冲，我们在不使用的时候，应该及时关闭它们，以便它们的缓冲及时回收内存。它们的缓冲不仅存在于java虚拟机内，还存在于java虚拟机外。如果我们仅仅是把它的引用设置为null,而不关闭它们，往往会造成内存泄露。因为有些资源性对象，比如SQLiteCursor（在析构函数finalize（）,如果我们没有关闭它，它自己会调close()关闭），如果我们没有关闭它，系统在回收它时也会关闭它，但是这样的效率太低了。因此对于资源性对象在不使用的时候，应该调用它的close()函数，将其关闭掉，然后才置为null.在我们的程序退出时一定要确保我们的资源性对象已经关闭。
程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。 
         2.构造adapter时,没有使用缓存contentview    衍生listview的优化问题-----减少创建view的对象,充分使用contentview,可以使用一静态类来优化处理getview的过程/ 
         3.Bitmap对象不使用时采用recycle()释放内存 
         4.activity中的对象的生命周期大于activity 调试方法: DDMS==> HEAPSZIE==>dataobject==>[Total Size]。 
         5.ThreadLocal使用不当。如果我们粗暴的把ThreadLocal设置null,而不调用remove()方法或set(null),那么就可能造成ThreadLocal绑定的对象长期也能被回收，因而产出内存泄露。







#布局优化

1.尽量线性布局，效率高于相对布局
2.布局层级优化，尽量降到最少。
3.通用资源提取，<include /> 标签来重用layout代码，以及<merge />删减多余或者额外的层级。




#业务逻辑优化

1.listview优化，图片加载优化。滑动时不加载图片。
2.数据库优化。关闭游标指针。
3.网络请求优化。及时取消请求，避免重复请求（连续刷新和点击时）。















DDMS的使用
DDMS全称：Dalvik Debug Monitor Service，是IED与模拟器或设备之间的桥梁。
一，DDMS的作用它提供截屏，查看线程和堆的信息，logcat，进程，广播状态信息，模拟来电呼叫和短信，虚拟地理坐标等等。 

二，DDMS怎样工作1，每一个Android应用都运行在一个Dalvik虚拟机实例里，而每一个虚拟机实例都是一个独立的进程空间。虚拟机的 线程机制，内存分配和管理，Mutex等等都是依赖底层操作系统而实现的。所有Android应用的线程都对应一个Linux线程，虚拟机因而可以更多的 依赖操作系统的线程调度和管理机制。 
2，DDMS在IDE与设备或模拟器之间的起着中间人的角色。 
3，DDMS启动时会与ADB之间建立一个device monitoring service用于监控设备。当设备断开或链接时，这个service就会通知DDMS。 
4，当一个设备链接上时，DDSM和ADB之间又会建立VM monitoring service用于监控设备上的虚拟机。 
5，通过ADB Deamon与设备上的虚拟机的debugger建立链接，这样DDMS就开始与虚拟机对话了。 

三，端口1，对于设备上每个虚拟机的debugger， DDMS都会开启一个监听端口。端口从8600开始。 
2，8700端口 

四，左边面板1，左边显示了所有当前能找到的所有模拟器或设备列表和每个设备当前正在运行的虚拟机列表。虚拟机是按程序的包命来显示的。 

2，通过这些列表可以找到运行着想调试的activity的虚拟机。每个虚拟机旁边的是“debugger pass-through”端口，链接到其中一个端口就会链接到设备上对应的虚拟机。不管如何，在用DDMS时，只需要链接到8700端口，因为DDSM 转发所有的通信到当前选择的虚拟机。这样，就不用在每次切换虚拟机是重新配置debugger端口。 

3，当一个正在运行的程序调用waitForDebugger()函数时，客户端名字旁边会显示一个红色的icon,知道debugger连上对 应的虚拟机，这是debugger会变成绿色。 

4，如果看到叉icon，着意味着DDMS用于不能打开虚拟机的端口而不能建立debugger与虚拟机建立连接。如果看到所有的虚拟机是这样， 很可能是有另外一个DDSM实例在运行。 
五，右边面板1，info 
这里显示关于选中的VM的一般的信息，包括进程ID，包名，和虚拟机版本。 

2，Threads 
线程视图列出了此进程的所有线程。 
ID:虚拟机分配的唯一的线程ID,在Dalvik里，它们是从3开始的奇数。 
Tid：linux的线程ID,For the main thread in a process, this will match the process ID. 
Stauts：线程状态， 
running:正在执行程序代码 
sleeping：执行了Thread.sleep() 
monitor：等待接受一个监听锁。 
wait:Object.wait() 
native：正在执行native代码 
vmwait：等待虚拟机 
zombie：线程在垂死的进程 
init：线程在初始化（我们不可能看到） 
starting：线程正在启动（我们不可能看到） 
utime：执行用户代码的累计时间 
stime：执行系统代码的累计时间 
name：线程的名字 

4，VM Heap 
展示一些堆的状态，在垃圾回收其间更新。当选定一个虚拟机时， VM Heap视图不能显示数据，可以点击右边面包上的带有绿色的”Show heap updates”按钮，然后在点击”Cause GC “实施垃圾回收更新堆的状态。 

6，Allocation Tracker 
在这个视图里，我们可以跟踪每个选中的虚拟机的内存分配情况。点击”Start Tracking”后点击”Get Allocations “就可以看到。 

7，Emulator Control 
在这里，可以模拟一些设备状态和行为。 
Telephony Status：改变电话语音和数据方案的状态，模拟不同的网络速度。 
TelePhony Actions：发送模拟的电话呼叫和短信到模拟器。 
Location Controls：发送虚拟的定位数据到模拟器里，我们就可以执行定位之类的操作。可以收工的在Manual里输入经度纬度发送到模拟器，也可以通过 GPX和KML文件。 

六，其他1，File Explorer 
通过Device > File Explorer 就打开File Explorer。这里可以浏览文件，上传上载删除文件，当然这是有相应权限限制的。 

2，Screen Capture 
通过Device > Screen Capture 就可以截图。 

3，Exploring Processes 
通过Device  > Show process status ，这里的信息是通过shell命令”ps -x”输出的。 
4，Examine Radio State 
通过Device > Dump radio，检测广播状态。 

5，Stop a Virtual Machine 
通过Actions > Halt VM ，停止一个虚拟机。










阿里笔试

1.请列举一些导致"APP启动慢"感受的典型问题或负面模式及相应的优化策略。

以Android支付婊冷启动为例：
1. UI阻塞问题

比如布局深度，过度渲染，内存抖动，耗时任务，导致UI阻塞，但是这个我觉得连我这样的菜鸟都知道的优化，人家早就解决了啊（这个如果是个人开发的话，可以用GPU profile进行UI调试，移除阻塞的ui代码，有一年经验的人都会的）。

还有用线程池维护线程，配置单例进行框架缓存，复用HTTP连接池等技术，这个属于偏java方向，网上教程一大堆。
2. 业务太多

假设支付宝使用了异步任务解决了阻塞问题，为什么仍然卡呢？我认为是支付宝的业务太多（并发过多，框架加载过多）。比如

    启动时连接各种不同域名的HTTPS比较耗时，多线程也撑不住啦（比如获取token后，才能进行真正的连接）
    启动时候就开始互相唤醒各种毒瘤进程，类似于病毒的双守护线程（比如淘宝）；
    启动各种后台Service与相应的初始化；
    启动一大堆单例框架，供全局调用；
    加载各种JNI组件，由于支付宝对安全要求高，需要更多的加解密运算，看看data下的so文件大家就知道了；
    使用了动态加载（比如Dexposed）技术，需要加载相关的组件，并走大量反射（以及因此产生的gc停顿，这里我没有量化，待验证），以及从服务器下载热修复与加载dex，更新ui的耗时

解决办法：

    简化HTTPS的API获取流程，以减少并发连接量，服务器进行优化（缓存，keep-alive，gzip，http2.0，http-dns，cdn），客户端使用成熟的框架进行请求即可（比如okhttp）；
    在并行加载各种单例或者框架时，进行加载调度（比如延迟加载，当然我说的可容易了）
    使用JNI解决密集运算（人家的确这么做了）

3. 团队协作

可以说，支付宝的业务可能比一个JAVA EE服务器还要多，这时需要一个好的架构师和一个好的团队。带过或者跟过团队的都知道，开始一定要一个技术大牛进行框架设计与技术分工。

    架构师当初对支付宝框架搭建需求分析不足，到了现在历史旧帐太多，又要天天改需求（支付宝是运营驱动而不想TX是产品驱动），非常不好重构了，而且有的老代码可能文档丢失，风格迥异，我认为这个才是真正的主要原因；现在使用了动态加载技术，感觉把一个android app 做成了jsp的感觉，可以一定程度上解决上述旧账的问题。
    团队是从服务器平台调过来的，代码风格不同，可能不太适应嵌入式下资源紧缺的环境（这个是我脑补的，我上次看到一个JAVAEE码农写的Android代码，唉~）；

4. 更多的优化

可以看看如何从程序优化的角度解释淘宝支付宝的安卓版卡顿？
2.客户端开发不同于服务端开发的一个典型背景是，我们的程序会运行在大量不同的设备商，带给我们很多底层执行环境上的约束，例如Android生态中典型的碎片化问题，有的团队为此只适配主流机型，有的约束开发可以使用的API，有的干脆只为iOS平台开发。请在平衡用户体验与研发成本之上，站在App设计和研发的角度，提出你的对策。

这道题目其实是与上题的两个极端，我的看法是：使用现成的框架，少造轮子。

    在UI上，Android上如果对性能要求不高的界面使用HTML + JsBridge的混合开发，以减少成本，剩下的界面只能用原生做了；iOS对HTML的体验非常好，完全可以全部用HTML来实现；UX切完图后就开始写两个平台的HTML部分的代码，可以保证不浪费时间。目前比较流行的react-native技术使用解释器渲染原生代码，可以看出是一个趋势。
    业务逻辑上，(1)尽量使用优秀的跨平台业务框架，比如RxJava与RxSwift都可以实现业务逻辑上的封装，确定好工作流后，各自分开开发业务内的东西即可，而不用与UI/生命周期混到一起；(2)使用MVVM架构对UI进行抽象与分离，比如Android上可以使用DataBinding以减少对UI的依赖，iOS自带MVVM就更不用说了。
    底层复杂运算上，使用标准C作为通用底层开发，然后在各自的平台上适配（比如JNI），Bilibili的视频播放开发就是基于开源的FFMPGE解码，然后各自适配（adapt）平台的SDK而开发，以减小研发成本。

    回报开源，提高企业科技影响力。

3.请以你的平台为例，解释APP“卡”的原因，并给出“滑屏卡顿”与“转场卡顿”的解决方案。

这道题目还是优化问题，同上。

滑屏卡顿：

    UI上：背景重复绘制；缺少绘制缓存；布局深度（DOMTree）过深；这些文章都烂大街了。
    业务上：UI线程阻塞（转移到工作线程）；工作线程负荷过大（滑动时停止加载）；内存泄露；线程泄露；

转场卡顿：

    UI上：背景重复绘制；布局深度（DOMTree）过高；类似于打开新浪首页的感觉；Bitmap吃内存过大；
    业务上：初始化业务太多了，如果不是必要的可以考虑延迟加载；如果非要用的话，只能简化并发了（RxJava大法好，帮你搞定阻塞流）；循环操作不合理导致频繁GC，内存抖动；







