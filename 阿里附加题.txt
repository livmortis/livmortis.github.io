一、2015


1.请列举一些导致"APP启动慢"感受的典型问题或负面模式及相应的优化策略。

以Android支付婊冷启动为例：
1. UI阻塞问题

比如布局深度，过度渲染，内存抖动，耗时任务，导致UI阻塞，但是这个我觉得连我这样的菜鸟都知道的优化，人家早就解决了啊（这个如果是个人开发的话，可以用GPU profile进行UI调试，移除阻塞的ui代码，有一年经验的人都会的）。

还有用线程池维护线程，配置单例进行框架缓存，复用HTTP连接池等技术，这个属于偏java方向，网上教程一大堆。
2. 业务太多

假设支付宝使用了异步任务解决了阻塞问题，为什么仍然卡呢？我认为是支付宝的业务太多（并发过多，框架加载过多）。比如

    启动时连接各种不同域名的HTTPS比较耗时，多线程也撑不住啦（比如获取token后，才能进行真正的连接）
    启动时候就开始互相唤醒各种毒瘤进程，类似于病毒的双守护线程（比如淘宝）；
    启动各种后台Service与相应的初始化；
    启动一大堆单例框架，供全局调用；
    加载各种JNI组件，由于支付宝对安全要求高，需要更多的加解密运算，看看data下的so文件大家就知道了；
    使用了动态加载（比如Dexposed）技术，需要加载相关的组件，并走大量反射（以及因此产生的gc停顿，这里我没有量化，待验证），以及从服务器下载热修复与加载dex，更新ui的耗时

解决办法：

    简化HTTPS的API获取流程，以减少并发连接量，服务器进行优化（缓存，keep-alive，gzip，http2.0，http-dns，cdn），客户端使用成熟的框架进行请求即可（比如okhttp）；
    在并行加载各种单例或者框架时，进行加载调度（比如延迟加载，当然我说的可容易了）
    使用JNI解决密集运算（人家的确这么做了）

3. 团队协作

可以说，支付宝的业务可能比一个JAVA EE服务器还要多，这时需要一个好的架构师和一个好的团队。带过或者跟过团队的都知道，开始一定要一个技术大牛进行框架设计与技术分工。

    架构师当初对支付宝框架搭建需求分析不足，到了现在历史旧帐太多，又要天天改需求（支付宝是运营驱动而不想TX是产品驱动），非常不好重构了，而且有的老代码可能文档丢失，风格迥异，我认为这个才是真正的主要原因；现在使用了动态加载技术，感觉把一个android app 做成了jsp的感觉，可以一定程度上解决上述旧账的问题。
    团队是从服务器平台调过来的，代码风格不同，可能不太适应嵌入式下资源紧缺的环境（这个是我脑补的，我上次看到一个JAVAEE码农写的Android代码，唉~）；

4. 更多的优化

可以看看如何从程序优化的角度解释淘宝支付宝的安卓版卡顿？
2.客户端开发不同于服务端开发的一个典型背景是，我们的程序会运行在大量不同的设备商，带给我们很多底层执行环境上的约束，例如Android生态中典型的碎片化问题，有的团队为此只适配主流机型，有的约束开发可以使用的API，有的干脆只为iOS平台开发。请在平衡用户体验与研发成本之上，站在App设计和研发的角度，提出你的对策。

这道题目其实是与上题的两个极端，我的看法是：使用现成的框架，少造轮子。

    在UI上，Android上如果对性能要求不高的界面使用HTML + JsBridge的混合开发，以减少成本，剩下的界面只能用原生做了；iOS对HTML的体验非常好，完全可以全部用HTML来实现；UX切完图后就开始写两个平台的HTML部分的代码，可以保证不浪费时间。目前比较流行的react-native技术使用解释器渲染原生代码，可以看出是一个趋势。
    业务逻辑上，(1)尽量使用优秀的跨平台业务框架，比如RxJava与RxSwift都可以实现业务逻辑上的封装，确定好工作流后，各自分开开发业务内的东西即可，而不用与UI/生命周期混到一起；(2)使用MVVM架构对UI进行抽象与分离，比如Android上可以使用DataBinding以减少对UI的依赖，iOS自带MVVM就更不用说了。
    底层复杂运算上，使用标准C作为通用底层开发，然后在各自的平台上适配（比如JNI），Bilibili的视频播放开发就是基于开源的FFMPGE解码，然后各自适配（adapt）平台的SDK而开发，以减小研发成本。

    回报开源，提高企业科技影响力。

3.请以你的平台为例，解释APP“卡”的原因，并给出“滑屏卡顿”与“转场卡顿”的解决方案。

这道题目还是优化问题，同上。

滑屏卡顿：

    UI上：背景重复绘制；缺少绘制缓存；布局深度（DOMTree）过深；这些文章都烂大街了。
    业务上：UI线程阻塞（转移到工作线程）；工作线程负荷过大（滑动时停止加载）；内存泄露；线程泄露；

转场卡顿：

    UI上：背景重复绘制；布局深度（DOMTree）过高；类似于打开新浪首页的感觉；Bitmap吃内存过大；
    业务上：初始化业务太多了，如果不是必要的可以考虑延迟加载；如果非要用的话，只能简化并发了（RxJava大法好，帮你搞定阻塞流）；循环操作不合理导致频繁GC，内存抖动；








二、2015秋



　1.针对无线互联网的现状和特殊性，请列举可提升用户体验的网络相关优化措施。(优化点可包括客户端、前端、服务端，甚至业务设计层面)

　　2.给定一个query和一个text，均由小写字母组成。要求在text中找出以同样的顺序连续出现在query中的最长连续字母序列的长度。例如， query为“acbac”，text为“acaccbabb”，那么text中的“cba”为最长的连续出现在query中的字母序列，因此，返回结果应该为其长度3。请注意程序效率。

　　3.写一个函数，输入一个二叉树，树中每个节点存放了一个整数值，函数返回这棵二叉树中相差最大的两个节点间的差值绝对值。请注意程序效率。