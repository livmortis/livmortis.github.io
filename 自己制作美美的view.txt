自定义view是android进阶之路上的必修课，能随心所欲做出自己设计的漂亮界面想想都小激动，终于等到发挥我设计天赋的时刻了，当然第一步还是得踏踏实实先把基本知识弄透彻。
   
    一、View的继承关系类
      ViewRoot是连接WindowManager和DecorView的纽带。
      Activity创建--DecorView添加到Window--创建ViewRootImpl对象--关联DecorView和ViewRootImpl。
      DecorView是顶级View，默认内部包括一个竖直的LinearLayout，里面是Title和Content。
　　二、三大流程之Measure流程
     概述：目的：决定view占据多大空间。
           测量两个东西，模式和值。模式――EXACTLY（准确值）,AT-MOST（限定了最大值，wrapcontent）,UNSPECIFIED(高度不限scrollview或Listview).
           requestLayout()方法会重新测量和布局，但不会重新绘制。


　　1.MeasureSpec

      有EXACTLY,AT-MOST,UNSPECIFIED三个静态成员变量和getMode()getSize()两个静态方法。
      MeasureSpec（由父容器的MeasureSpec的mode和LayoutParams共同决定）决定了一个普通View的尺寸大小；MeasureSpec（由窗口大小和LayoutParams共同决定）也决定了一个DecorView的尺寸大小。
      普通View的模式和尺寸大小的决定规律：

      它是一个32位int值，前两位是SpecMode，后三十位是SpecSize。其中SpecMode分成三类：EXACTLY（具体数值、match_parent）,AT_MOST（wrap_content）,UNSPECIFIED。
    2.View的Mesure流程（Measure方法测量自己即可）
      用到的方法：measure(),onMeasure(),setMeasuredDimension(),wantWidth(),wantHeight()(这两个是自定义)，getSuggestedMinimumWidth(),getSuggestedMinimumHeight(),getMode(),getSize()
      1>、View的measure()，是final所以不能改写，于是改写它所调用的onMeasure()方法。
      2>、setMeasuredDimention()方法是onMeasure()方法中的最主要方法，两个参数分别是宽和高，通过调用自定义的getWidth和getHeight来得到。
      3>、自定义的wantWidth()方法，有两个参数，第一个已经是size了，已经可以用来做返回值了（这样该方法就没意义了），是因为第二个参数是mesureSpec,用它来计算specSize，方法的目的正是考察specSize有没有必要代替掉size。考察依据：UNSPECIFIED模式则直接用size，EXACTLY模式和AT_MOST模式则用提取的specSize。
          第一个参数size的来源：wantWidth()调用者调用了getSuggestedMinimumWidth()方法计算而出的。计算方法是直接返回android:minWidth这个属性值，若没有该属性值，就返回0（无背景）或是背景大小（有背景）。
          第二个参数mesureSpec计算specSize的做法：通过MeasureSpec的getSize()方法，方法参数正是mesureSpec。同时通过MeasureSpec的getMode()方法得到specMode用来后面筛选。
      4>、如果通过继承View的方式自定义控件，wrap_content参数效果会和match_parent一样。所以必须重写onMeasure()。
      
    3.ViewGroup的Mesure流程（Measure方法测量自己，和遍历的用Measure方法测量子元素）
          测量子类时用的：measureChildren(),measureChild(),getLayoutParams(),getChildrenMeasuredSpec(),measure()
          ViewGroup是抽象类，所以测量自己的任务交给子类LineaLayout等去实现：onMeasure()
      1>、在measureChildren()中遍历对子view执行measureChild()方法。
      2>、在measureChild()方法中，先提取child的LayoutParams参数getLayoutParams()，然后将params作为三个参数之一传给getChildMeasureSpec()方法得到measureSpec，最后调用measure()方法传入两个measureSpec作为参数进行测量。
    
    4.监听view的改变，调用view的尺寸信息。
      1>、onWindowFocusChange()方法，参数为boolean类型的hasFocus。内部判断hanFocus为真即可getMeasuredWidth()和getMeasuredHeight()。
      2>、view.post()方法。用它建立的线程中可直接getMeasuredWidth()和getMeasuredHeight()。
      3>、addOnGlobalLayoutListener()监听器方法。用法同事件监听器。调用者为view树ViewTreeObserver的对象，创建对象方法为getViewTreeObserver()。
      4>、view.measure()方法。
    二、三大流程之Layout流程
    1、layout作用是ViewGroup用来确定子元素的位置，所以只有viewGroup考虑onLayout()。
       layout()确定view本身的位置，onLayout()确定viewGroup的所有子元素的位置。
       确定全部元素位置的层层递进过程：layout()（父元素自己定位）――onLayout()――setChildFrame()――layout()（子元素定位）――继续传递完成整个View树。
    2、应该在layout中get尺寸，因为onMeasure()中得到的是“测量宽/高”，layout过程中得到的是“最终宽/高”。下面两种情况会导致不同：
       1>、重写layout()，将其四个参数（四个顶点坐标）改动
       2>、View需要多次measure才能确定“测量宽/高”，前几次测量会有出入。
    三、三大流程之Draw流程
    1、View的绘制过程
       1>、绘制背景：  drawBackground(canvas)
       2>、绘制自己：  onDraw(canvas)
       3>、绘制children：  dispatchDraw(canvas)
       4>、绘制装饰：  onDrawScrollBar(canvas)

    四、用户交互onTouchEvent()和onInterceptTouchEvent()
        1.判断MotionEvent.ACTION_MASK的值。有ACTION_DOWN、ACTION_UP、ACTION_MOVE、ACTION_POINT_UP、ACTION_POINT_DOWN五种。
        2.onTouchEvent()应用于View。
        3.onInterceptTouchEvent()应用于ViewGroup。返回值boolean类型，true则表示可以拦截子控件事件。比如listview可以滚动说明拦截掉了子项的手势。
        

    五、其他
        1.onSaveInstanceState()和onRestoreInstanceState()。当活动重建是view是否重建，比如进度条在活动重建时继续上一次的进度。
        2.ScaleGestureDetector类来手势缩放。

    五、自定义View
    1、继承View。
    1>、新建类继承View，实现两个构造方法，两个参数的构造方法给布局用，一个参数的给活动用。
    2>、重写onDraw()，用它的参数canvas进行drawXXXX()绘制各种图形，新建Paint对象调用setColor(),setTextSize(),setARGB(),measureText()等方法进行修改。
    3>、重写onMeasure(),若想可以使用wrapContent属性则需重写此方法。若有必要还要加入padding修正代码。
    4>、动态效果。添加线程，线程中对坐标变量或颜色等属性进行循环变化（可充分利用Random对象的nextXXX()方法生产随机数），用包裹好的sleep()方法实现动态可见。线程中逻辑代码结束后调用postInvalidate()方法该方法会自动调用一次onDraw()。最后在onDraw()中创建该线程的对象，开启线程。
 
    2、继承ViewGroup。
    3、继承特定的View。
    4、继承特定的ViewGroup。



    5、添加样式属性。
    定义。xml中定义样式：比如要想设为属性的值是A，在res-values文件中新建一个xml文件，添加<declare-styleable>标签，里面先设置name（自定义view类名），里面再添加<attr>标签，里面设置name（样式属性名）和format（样式属性类型如reference,dimension,color和基本数据类型等）两个值。
    布局。layout中添加样式属性：
        首先引入命名空间。xmlns:iOS="http://schemas.android.com/apk/res-auto"。
        然后即可在下面标签中设置属性。iOS:name名="值"
    解析。最后进入自定义view类中的两个参数的构造方法进行解析。用context的obtainStyledAttributes()方法创建一个TypedArray对象。方法的两个参数分别是attrs和R.styleable.自定义view名。接着用该对象调用getInt()方法返回值赋给样式属性变量，两个参数分别是“R.styleable.自定义view名_样式属性名”和样式属性默认值。最后释放TypedArray,调用recycle()方法即可。